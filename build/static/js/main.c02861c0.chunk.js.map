{"version":3,"sources":["images/loading.svg","constants/api.js","actions/rates.js","reducers/rates.js","actions/currencies.js","reducers/currencies.js","reducers/index.js","helpers/history.js","selectors/rates.js","theme/Form.js","components/Loading.js","components/Exchange.js","containers/Rates.js","selectors/currencies.js","components/Header.js","theme/GlobalStyle.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","appId","RATES_API","concat","CURRENCY_API","actionTypes","rates","state","arguments","length","undefined","action","type","Object","objectSpread","loading","data","error","currencies","reducers","combineReducers","history","createHistory","getState","Input","styled","input","_templateObject","props","border","Form","form","_templateObject2","Label","label","_templateObject3","Text","_templateObject4","color","fontSize","LoadingImage","img","Loading_templateObject","Loading","react_default","a","createElement","src","LoadingIcon","alt","Wrap","div","Exchange_templateObject","Items","Exchange_templateObject2","Rate","Exchange_templateObject3","Country","Exchange_templateObject4","Exchange","_this","updateRate","e","value","target","calculateRates","rate","parseInt","setState","fn","newRates","entries","forEach","_ref","_ref2","slicedToArray","key","val","exchangeInput","formik_esm","initialValues","currency","validate","values","errors","render","_ref3","handleChange","handleBlur","handleSubmit","onChange","htmlFor","id","onBlur","name","placeholder","renderRate","item","i","country","keys","indexOf","isNaN","Math","round","_this2","this","ratesLoading","Loading_Loading","map","Component","Rates","loadRates","loadCurrencies","nextProps","getRates","_this$props","getCurrencies","components_Exchange","connect","dispatch","setInterval","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","next","fetch","method","sent","json","t0","stop","_x","apply","Head","header","Header_templateObject","Header","GlobalStyle","createGlobalStyle","GlobalStyle_templateObject","App","h1","GlobalStyle_templateObject2","GlobalStyle_templateObject3","GlobalStyle_templateObject4","_templateObject5","className","Router","components_Header","Switch","Route","path","component","Boolean","window","location","hostname","match","d","__webpack_exports__","store","persistor","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","persistConfig","storage","persistedReducer","persistReducer","createStore","applyMiddleware","thunk","persistStore","ReactDOM","es","integration_react","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c02861c0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.d1329d61.svg\";","const appId = 'f2e7bee269fa4770a575a1a08ec81d6a';\n\nexport const RATES_API = `https://openexchangerates.org/api/latest.json?app_id=${appId}`;\n\nexport const CURRENCY_API = `https://openexchangerates.org/api/currencies.json?app_id=${appId}`;\n","import {RATES_API} from '../constants/api';\n\nexport const actionTypes = {\n    RATES_LOAD_REQUEST: 'RATES_LOAD_REQUEST',\n    RATES_LOAD_SUCCESS: 'RATES_LOAD_SUCCESS',\n    RATES_LOAD_FAILURE: 'RATES_LOAD_FAILURE'\n};\n\nconst requestOptions = ()  => ({\n    method: 'GET'\n});\n\nconst getRates = () => fetch(`${RATES_API}`, requestOptions());\n\nexport const loadRates = dispatch => {\n\n    return async dispatch => {\n\n        dispatch({type: actionTypes.RATES_LOAD_REQUEST});\n\n        try {\n            const response = await getRates();\n            const data = await response.json();\n\n            dispatch({\n                data,\n                type: actionTypes.RATES_LOAD_SUCCESS\n            });\n        } catch (error) {\n            dispatch({\n                error,\n                type: actionTypes.RATES_LOAD_FAILURE\n            });\n        }\n    };\n};\n","import {actionTypes} from '../actions/rates';\n\nconst rates = (state = {}, action) => {\n    switch (action.type) {\n        case actionTypes.RATES_LOAD_REQUEST :\n            return {\n                ...state,\n                loading: true\n            };\n        case actionTypes.RATES_LOAD_SUCCESS :\n            return {\n                data: action.data.rates,\n                loading: false\n            };\n        case actionTypes.RATES_LOAD_FAILURE :\n            return {\n                error: action.error\n            };\n        default:\n            return state;\n    }\n};\n\nexport default rates;\n","import {CURRENCY_API} from '../constants/api';\n\nexport const actionTypes = {\n    CURRENCY_LOAD_REQUEST: 'CURRENCY_LOAD_REQUEST',\n    CURRENCY_LOAD_SUCCESS: 'CURRENCY_LOAD_SUCCESS',\n    CURRENCY_LOAD_FAILURE: 'CURRENCY_LOAD_FAILURE'\n};\n\nconst requestOptions = ()  => ({\n    method: 'GET'\n});\n\nconst getCurrencies = () => fetch(`${CURRENCY_API}`, requestOptions());\n\nexport const loadCurrencies = dispatch => {\n\n    return async dispatch => {\n\n        dispatch({type: actionTypes.CURRENCY_LOAD_REQUEST});\n\n        try {\n            const response = await getCurrencies();\n            const data = await response.json();\n\n            dispatch({\n                data,\n                type: actionTypes.CURRENCY_LOAD_SUCCESS\n            });\n\n        } catch (error) {\n            dispatch({\n                error,\n                type: actionTypes.CURRENCY_LOAD_FAILURE\n            });\n        }\n\n    };\n\n};\n","import {actionTypes} from '../actions/currencies';\n\nconst currencies = (state = {}, action) => {\n    switch (action.type) {\n        case actionTypes.CURRENCY_LOAD_REQUEST :\n            return {\n                ...state,\n                loading: true\n            };\n        case actionTypes.CURRENCY_LOAD_SUCCESS :\n            return {\n                data: action.data,\n                loading: false\n            };\n        case actionTypes.CURRENCY_LOAD_FAILURE :\n            return {\n                error: action.error\n            };\n        default:\n            return state;\n    }\n};\n\nexport default currencies;\n","import {combineReducers} from 'redux';\n\nimport rates from './rates';\nimport currencies from './currencies';\n\nconst reducers = combineReducers({\n    rates,\n    currencies\n});\n\nexport default reducers;\n","import createHistory from 'history/createBrowserHistory';\n\nexport const history = createHistory();\n","const getState = state => state || {};\n\nexport const getRates = state => getState(state).rates.data || [];\n\nexport const ratesLoading = state => getState(state).rates.loading;\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n    width: 100%;\n    height: 40px;\n    border-bottom: ${props => props.border || '2px solid #a0a6ad'};\n    background-color: #fff;\n    padding: 0;\n    border-radius: 3px;\n    transition: .5s linear;\n    background-color: #f3f4f5;\n    border-top: 0;\n    border-left: 0;\n    border-right: 0;\n    font-size: 20px;\n    color: #191c1e;\n    outline: none;\n    &::placeholder {\n        color: #a0a6ad;\n        font-size: 20px;\n    }\n    &:focus {\n        border-bottom: 2px solid #191c1e;\n    }\n`;\n\nexport const Form = styled.form`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin: 0 auto;\n    background: #f3f4f5;\n    width: 100%;\n    text-align: left;\n    padding: 1rem;\n    position: sticky;\n    top: 0;\n`;\n\nexport const Label = styled.label`\n    display: flex;\n    flex-direction: column;\n    color: #777;\n    font-size: 0.8em;\n    margin: 0.5em 0;\n    position: relative;\n    width: 100%;\n    color: #eb008d;\n`;\n\nexport const Text = styled.p`\n    color: ${props => props.color || '#4d4d4d'};\n    font-size: ${props => props.fontSize || '.8rem'};\n    align-self: flex-start;\n`;\n","//@flow\nimport React from 'react';\nimport styled from 'styled-components';\nimport LoadingIcon from '../images/loading.svg';\n\nconst LoadingImage = styled.img`\n    margin: 0 auto;\n`;\n\nexport const Loading = () => <LoadingImage src={LoadingIcon} alt='Loading' />;\n","//@flow\nimport React, {Component} from 'react';\nimport styled from 'styled-components';\nimport {Formik} from 'formik';\nimport {Form, Label, Input, Text} from '../theme/Form';\nimport {Loading} from './Loading';\n\nconst Wrap = styled.div`\n    display: grid;\n`;\n\nconst Items = styled.div`\n    padding: 1rem 1rem 0;\n`;\n\nconst Rate = styled.div`\n    display: flex;\n    justify-content: space-between;\n`;\n\nconst Country = styled.div`\n    text-align: left;\n`;\n\ntype TestProps = {\n    rates: {},\n    currencies: {string: string}\n}\n\ntype TestState = {\n    rates: {}\n}\n\nclass Exchange extends Component<TestProps, TestState> {\n\n    state = {\n        rates: this.props.rates\n    }\n\n    updateRate = e => {\n\n        const value = e.target.value;\n\n        const rates = this.calculateRates(this.props.rates, rate => rate * parseInt(value));\n\n        this.setState({\n            rates\n        });\n\n    }\n\n    calculateRates = (rates, fn) => {\n        const newRates = {};\n\n        Object.entries(rates).forEach(([key, val]) => newRates[key] = fn(val));\n        return newRates;\n    }\n\n    exchangeInput = () => {\n        return <Formik\n            initialValues={{currency: ''}}\n            validate={values => {\n                let errors = {};\n\n                if (!values.currency) {\n                    errors.currency = 'Please enter an amount';\n                }\n                return errors;\n\n            }}\n            render={({\n                errors,\n                values,\n                handleChange,\n                handleBlur,\n                handleSubmit\n            }) => (\n                <Form onChange={this.updateRate}>\n                    <Label htmlFor=\"currency\">Amount to convert</Label>\n                    <Input\n                        id=\"currency\"\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        value={values.currency}\n                        border={errors.currency && '2px solid red'}\n                        type=\"number\"\n                        name=\"currency\"\n                        placeholder=\"Enter amount in USD\"\n                    />\n                    {errors.currency && <Text color=\"red\">{errors.currency}</Text>}\n                </Form>\n            )}\n        />;\n    }\n\n    renderRate = (item, i) => {\n        const country = Object.values(this.props.currencies)[Object.keys(this.state.rates).indexOf(item)];\n\n        return (<Rate key={i}>\n            <Country>\n                <Text>{item}</Text>\n                <Text color='#0075eb'>{country}</Text>\n            </Country>\n            <Text fontSize={'1.6rem'}>{isNaN(this.state.rates[item]) ? 0 :\n                Math.round(this.state.rates[item] * 100) / 100}</Text>\n        </Rate>);\n    }\n\n    render() {\n\n        return (\n            <Wrap>\n                {this.exchangeInput()}\n                {this.props.ratesLoading || this.props.ratesLoading === undefined ?\n                    <Loading /> : <Items>\n                        {Object.keys(this.state.rates).map((item, i) => this.renderRate(item, i))}\n                    </Items>}\n            </Wrap>\n        );\n    }\n\n};\n\nexport default Exchange;\n","//@flow\nimport React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {getRates, ratesLoading} from '../selectors/rates';\nimport {getCurrencies} from '../selectors/currencies';\nimport {loadRates} from '../actions/rates';\nimport {loadCurrencies} from '../actions/currencies';\nimport Exchange from '../components/Exchange';\n\ntype TestProps = {\n    getRates: {string: number},\n    getCurrencies: {string: string},\n    ratesLoading: boolean,\n    loadRates: () => void,\n    loadCurrencies: () => void\n}\n\nclass Rates extends Component<TestProps> {\n\n    componentDidMount() {\n        this.props.loadRates();\n        this.props.loadCurrencies();\n    }\n\n    shouldComponentUpdate(nextProps) {\n        return nextProps.getRates !== this.props.getRates;\n    }\n\n    render() {\n\n        const {getRates, getCurrencies, ratesLoading} = this.props;\n\n        return <Exchange ratesLoading={ratesLoading} rates={getRates} currencies={getCurrencies} />;\n\n    }\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        getRates: getRates(state),\n        ratesLoading: ratesLoading(state),\n        getCurrencies: getCurrencies(state)\n    };\n};\n\nconst mapDispatchToProps = dispatch => ({\n    loadRates: () => setInterval(() => dispatch(loadRates(dispatch)), 10000),\n    loadCurrencies: () => dispatch(loadCurrencies(dispatch))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Rates);\n","const getState = state => state || {};\n\nexport const getCurrencies = state => getState(state).currencies.data || [];\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Head = styled.header`\n    padding: 2rem 1rem;\n    text-align: center;\n    color: #191c1e;\n    display: flex;\n    justify-content: center;\n    background-color: #f3f4f5;\n`;\n\nconst Header = () => <Head>Currency Exchange</Head>;\n\nexport default Header;\n","import styled, {createGlobalStyle} from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n\n    * {\n        box-sizing: border-box;\n    }\n\n    body {\n        background: #FFF;\n        margin: 0;\n        padding: 0;\n        font-family: Helvetica Neue,Helvetica,Arial,sans-serif; \n        -webkit-font-smoothing: antialiased;\n        -moz-osx-font-smoothing: grayscale;\n        color: #000;\n\n        h1, h2 {\n            margin: 0 auto 1rem auto;\n            color: #000;\n            text-align: center;\n            text-transform: uppercase;\n        }\n\n        h2 {\n            margin: 1rem 0 0;\n        }\n\n        .main {\n            text-align: center;\n        }\n    }`\n;\n\nexport const Title = styled.h1`\n    text-align:center;\n    color: #000;\n    margin-bottom: 1rem;\n    text-transform: uppercase;\n    border-bottom: 1px solid #eb008d;\n    padding-bottom: 1rem;\n`;\n\nexport const Image = styled.img`\n    margin: 0 auto;\n    width: 100%;\n`;\n\nexport const ContentWrap = styled.div`\n    display: grid;\n    grid-template-columns: 100%;\n\n    @media (min-width: 768px) {\n        grid-template-columns: 50% 50%;\n    }\n    @media (min-width: 1024px) {\n        grid-template-columns: 33% 33% 33%;\n    }\n`;\n\nexport const ContentItem = styled.div`\n    background-color: #FFF;\n    border-radius: 3px; \n    display: grid;\n    padding: 1rem;\n    text-align: center;\n    max-width: 100%;\n    margin: 1rem 0;\n    @media (min-width: 768px) {\n        margin: 1rem;\n    }\n`;\n","import React, {Component} from 'react';\nimport {Switch, Router, Route} from 'react-router-dom';\nimport {history} from './helpers/history';\n\nimport Rates from './containers/Rates';\nimport Header from './components/Header';\n\nimport {GlobalStyle} from './theme/GlobalStyle';\n\nclass App extends Component {\n\n    render() {\n\n        return (\n            <div className=\"wrapper\">\n                <GlobalStyle />\n                <Router history={history}>\n                    <div>\n                        <Header />\n                        <div className=\"main\">\n                            <Switch>\n                                <Route path=\"/\" component={Rates} />\n                            </Switch>\n                        </div>\n                    </div>\n                </Router>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createStore, applyMiddleware, compose} from 'redux';\nimport {Provider} from 'react-redux';\nimport thunk from 'redux-thunk';\nimport {persistReducer, persistStore} from 'redux-persist';\nimport {PersistGate} from 'redux-persist/integration/react';\nimport storage from 'redux-persist/es/storage';\nimport reducers from './reducers/index';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst persistConfig = {\n    key: 'root',\n    storage\n};\n\nconst persistedReducer = persistReducer(persistConfig, reducers);\n\nexport const store = createStore(persistedReducer, composeEnhancers(\n    applyMiddleware(thunk)\n));\n\nexport const persistor = persistStore(store);\n\nReactDOM.render(\n    <Provider store={store}>\n        <PersistGate persistor={persistor}>\n            <App />\n        </PersistGate>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}